apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(7),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(7),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(7),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(0).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(7),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(7),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(7),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(1).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(7),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(7),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(7),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(2).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(3),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(3),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(3),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(7),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(7),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(7),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(3).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(5),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(5),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(5),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(6),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(6),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(6),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(7),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(7),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(7),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(4).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(5),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(5),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(5),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(6),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(6),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(6),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(7),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(7),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(7),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(5).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(5),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(5),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(5),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(6),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(6),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(6),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(7),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(7),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(7),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(6).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(3),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(3),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(3),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(5),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(5),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(5),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(6),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(6),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(6),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(7),memory_order_seq_cst)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(7),memory_order_seq_cst)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(7),memory_order_seq_cst)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(7).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(7),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(7),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(7),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(9),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(9),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(9),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(10),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(10),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(8).fetch_and(int(10),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(7),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(7),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(7),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(9),memory_order_seq_cst)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(9),memory_order_seq_cst)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(9),memory_order_seq_cst)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(10),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(10),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(9).fetch_and(int(10),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(7),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(7),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(7),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(9),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(9),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(9),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(10),memory_order_seq_cst)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(10),memory_order_seq_cst)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: std::atomic<int>(10).fetch_and(int(10),memory_order_seq_cst)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : int
   P/pun    : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : int
   operation: int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(7),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(7),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(7),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(0).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(7),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(7),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(7),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(1).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(7),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(7),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(7),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(2).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(3),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(3),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(3),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(7),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(7),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(7),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(3).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(5),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(5),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(5),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(6),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(6),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(6),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(7),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(7),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(7),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(4).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(5),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(5),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(5),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(6),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(6),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(6),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(7),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(7),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(7),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(5).fetch_and(int(10),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(5),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(5),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(5),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(6),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(6),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(6),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(7),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(7),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(7),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(9),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(6).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(3),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(3),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(3),memory_order_seq_cst)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(4),memory_order_seq_cst)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(5),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(5),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(5),memory_order_seq_cst)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(6),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(6),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(6),memory_order_seq_cst)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(7),memory_order_seq_cst)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(7),memory_order_seq_cst)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(7),memory_order_seq_cst)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(8),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(9),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(7).fetch_and(int(10),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(3),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(7),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(7),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(7),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(9),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(9),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(9),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(10),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(10),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(8).fetch_and(int(10),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(1),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(2),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(3),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(5),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(6),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(7),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(7),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(7),memory_order_seq_cst)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(9),memory_order_seq_cst)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(9),memory_order_seq_cst)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(9),memory_order_seq_cst)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(10),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(10),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(9).fetch_and(int(10),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(0),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(1),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(2),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(3),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(4),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(5),memory_order_seq_cst)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(6),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(7),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(7),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(7),memory_order_seq_cst)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(8),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(9),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(9),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(9),memory_order_seq_cst)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(10),memory_order_seq_cst)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(10),memory_order_seq_cst)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::cpp, 0ul>
   scheme   : cpp
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: std::atomic<unsigned int>(10).fetch_and(int(10),memory_order_seq_cst)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong, 0ul>
   scheme   : strong
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::strong::pun, 0ul>
   scheme   : strong::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak, 0ul>
   scheme   : weak
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::weak::pun, 0ul>
   scheme   : weak::pun
   function : ristra::atomics::internal::andequal<int>
   sync     : memory_order_seq_cst
   T/return : unsigned int
   P/pun    : int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::lock, 0ul>
   scheme   : lock
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(0) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(1) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(2) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(7)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(3) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(7)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(4) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(6)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(7)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(5) &= int(10)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(5)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(7)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(9)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(6) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(3)
value == 3
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(4)
value == 4
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(5)
value == 5
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(6)
value == 6
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(7)
value == 7
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(8)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(9)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(7) &= int(10)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(3)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(7)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(8) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(1)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(2)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(3)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(5)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(6)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(7)
value == 1
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(9)
value == 9
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(9) &= int(10)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(0)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(1)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(2)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(3)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(4)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(5)
value == 0
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(6)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(7)
value == 2
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(8)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(9)
value == 8
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(10)
value == 10
apply
   left side: ristra::atomics::atomic<unsigned int, ristra::atomics::serial, 0ul>
   scheme   : serial
   function : ristra::atomics::internal::andequal<int>
   T/return : unsigned int
   operation: unsigned int(10) &= int(10)
value == 10
