#------------------------------------------------------------------------------#
# Copyright (c) 2014 Los Alamos National Security, LLC
# All rights reserved.
#------------------------------------------------------------------------------#

################################################################################
# Please Do Not Edit This File Unless You Know What You Are Doing!!!
#
# Project-specific configuration rules should be added in the 'config'
# subdirectory of the top-level of this project in the appropriate file,
# e.g., package configuration options should go in 'config/packages.cmake'.
#
# For more documentation on the design philosophy of this build system
# and the recognized configuration files that can be added to the 'config'
# subdirectory, please look in 'cinch/README.md' and 'cinch/INSTALL.md'
# from the top-level of this project.
#
# Any changes to the basic build template should be discussed with the
# project maintainers.
################################################################################

#------------------------------------------------------------------------------#
# Require some version of cmake
#------------------------------------------------------------------------------#

cmake_minimum_required(VERSION 2.8)

#------------------------------------------------------------------------------#
# Include project-level CMake configuration file
#------------------------------------------------------------------------------#

if(NOT "$ENV{CINCH_SOURCE_DIR}" STREQUAL "")
    set(CINCH_SOURCE_DIR $ENV{CINCH_SOURCE_DIR})
elseif(EXISTS ${CMAKE_SOURCE_DIR}/cinch)
    set(CINCH_SOURCE_DIR ${CMAKE_SOURCE_DIR}/cinch)
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CINCH_SOURCE_DIR}/cmake")

include(common_includes)
include(install_headers)

project(ristra)

set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

#------------------------------------------------------------------------------#
# Set header suffix regular expression
#------------------------------------------------------------------------------#

set(CINCH_HEADER_SUFFIXES "\\.h")

#------------------------------------------------------------------------------#
# If a C++14 compiler is available, then set the appropriate flags
#------------------------------------------------------------------------------#

include(cxx14)

check_for_cxx14_compiler(CXX14_COMPILER)

if(CXX14_COMPILER)
    enable_cxx14()
else()
    message(FATAL_ERROR "C++14 compatible compiler not found")
endif()

#------------------------------------------------------------------------------#
# Enable exceptions
#------------------------------------------------------------------------------#

OPTION (ENABLE_EXCEPTIONS "Enable C++ exceptions (really?)"  ON)
if(ENABLE_EXCEPTIONS)
  add_definitions( -DENABLE_EXCEPTIONS)
endif()


#------------------------------------------------------------------------------#
# Some precision setup
#------------------------------------------------------------------------------#

# double or single precision
OPTION (DOUBLE_PRECISION "Use double precision reals"  ON)

if( DOUBLE_PRECISION )
  message(STATUS "Note: Double precision build activated.")
  add_definitions( -DDOUBLE_PRECISION )
  SET (TEST_TOLERANCE 1.0e-14 CACHE STRING "The testing tolerance" )
else()
  message(STATUS "Note: Single precision build activated.")
  SET (TEST_TOLERANCE 1.0e-6 CACHE STRING "The testing tolerance" )
endif()

add_definitions( -DTEST_TOLERANCE=${TEST_TOLERANCE} )

#------------------------------------------------------------------------------#
# Support for embedded interpreters
#------------------------------------------------------------------------------#

find_package (PythonLibs QUIET)

option(ENABLE_PYTHON "Enable Python Support" ${PYTHONLIBS_FOUND})

if(ENABLE_PYTHON AND NOT PYTHONLIBS_FOUND)
  message(FATAL_ERROR "Python requested, but not found")
endif()

if (ENABLE_PYTHON)
   message (STATUS "Found PythonLibs: ${PYTHON_INCLUDE_DIRS}")
   include_directories( ${PYTHON_INCLUDE_DIRS} )
   list( APPEND RISTRA_LIBRARIES ${PYTHON_LIBRARIES} )
   add_definitions( -DHAVE_PYTHON )
endif ()

#------------------------------------------------------------------------------#
# Lua 5.3
#------------------------------------------------------------------------------#
find_package (Lua QUIET HINTS  $ENV{LUA_ROOT} $ENV{LUA_DIR})
set(LUA_FOUND2 FALSE)
if( NOT "${LUA_FOUND}" )
  # alternative: look for Lua files from env vars
  message(STATUS "Looking for Lua through env vars")
  # Sigh. CMake.
  set(LUA_INCLUDE_DIR1 $ENV{LUA_INCLUDE})
  set(LUA_INCLUDE_DIR2 $ENV{LUA_INCLUDE_DIR})
  if(LUA_INCLUDE_DIR1)
    set(LUA_INCLUDE_DIR ${LUA_INCLUDE_DIR1})
    set(LUA_LIBRARY_PATH $ENV{LUA_LIB})
    if(UNIX)
      if(APPLE)
        set(LUA_LIBRARIES ${LUA_LIBRARY_PATH}/liblua.a)
      else()
        set(LUA_LIBRARIES ${LUA_LIBRARY_PATH}/liblua.a dl)
      endif()
    endif()
    set(LUA_FOUND2 TRUE)
  elseif(LUA_INCLUDE_DIR2)
    set(LUA_INCLUDE_DIR ${LUA_INCLUDE_DIR2})
    set(LUA_LIBRARY $ENV{LUA_LIBRARY})
    set(LUA_LIBRARIES ${LUA_LIBRARY})
    set(LUA_FOUND2 TRUE)
  endif()

else()
  message(STATUS "Found Lua through find_package")
endif()
set(enable_lua_default OFF)
if(LUA_FOUND OR LUA_FOUND2)
  set(enable_lua_default ON)
endif()
option(ENABLE_LUA "Enable Lua Support"  ${enable_lua_default})
if(${ENABLE_LUA})
  if(NOT ("${LUA_FOUND}" OR "${LUA_FOUND2}"))
    message(STATUS "ENABLE_LUA: " ${ENABLE_LUA})
    message(STATUS "LUA_FOUND: " ${LUA_FOUND})
    message(STATUS "LUA_FOUND2: " ${LUA_FOUND2})
    message(FATAL_ERROR "Lua requested, but not found")
  else()
    message (STATUS "Found Lua: LUA_INCLUDE_DIR: '${LUA_INCLUDE_DIR}', libs = '${LUA_LIBRARIES}'")
    include_directories( ${LUA_INCLUDE_DIR} )
    list( APPEND RISTRA_LIBRARIES ${LUA_LIBRARIES} )
    add_definitions( -DHAVE_LUA )
  endif ()
else()
  message(STATUS "Not using Lua")
endif()

#------------------------------------------------------------------------------#
# Boost
#
# Note that this find package only sets the header information. To find
# library dependencies, add COMPONENTS and specify the ones that you need.
#------------------------------------------------------------------------------#
find_package(Boost REQUIRED)

if(NOT ${Boost_FOUND})
  # alternative: try to guess from env vars
  message(STATUS "Trying to guess Boost from env vars")
  set(boost_inc_from_env $ENV{BOOST_INCLUDEDIR})
  get_filename_component(boost_root_from_env ${boost_inc_from_env} DIRECTORY)
  message(STATUS "boost_root_from_env: " ${boost_root_from_env})
  find_package(Boost REQUIRED HINTS ${boost_root_from_env})
endif()
include_directories(${Boost_INCLUDE_DIRS})

#------------------------------------------------------------------------------#
# Add options for design by contract
#------------------------------------------------------------------------------#

set(RISTRA_DBC_ACTIONS throw notify nothing)

if(NOT RISTRA_DBC_ACTION)
  list(GET RISTRA_DBC_ACTIONS 0 RISTRA_DBC_ACTION)
endif()

set(RISTRA_DBC_ACTION "${RISTRA_DBC_ACTION}" CACHE STRING
  "Select the design by contract action")
set_property(CACHE RISTRA_DBC_ACTION PROPERTY STRINGS ${RISTRA_DBC_ACTIONS})

set(RISTRA_DBC_REQUIRE ON CACHE BOOL
  "Enable DBC Pre/Post Condition Assertions")

if(RISTRA_DBC_ACTION STREQUAL "throw")
  add_definitions(-DRISTRA_DBC_THROW)
elseif(RISTRA_DBC_ACTION STREQUAL "notify")
  add_definitions(-DRISTRA_DBC_NOTIFY)
endif()

if(RISTRA_DBC_REQUIRE)
  add_definitions(-DRISTRA_REQUIRE_ON)
endif()

#------------------------------------------------------------------------------#
# Load the cinch extras
#------------------------------------------------------------------------------#

cinch_load_extras()

#------------------------------------------------------------------------------#
# configure header
#------------------------------------------------------------------------------#

configure_file(${PROJECT_SOURCE_DIR}/config/ristra.h.in
  ${CMAKE_BINARY_DIR}/ristra.h @ONLY)
include_directories(${CMAKE_BINARY_DIR})
install(FILES ${CMAKE_BINARY_DIR}/ristra.h DESTINATION include)

#------------------------------------------------------------------------------#
# Add library targets
#------------------------------------------------------------------------------#
set(IS_RISTRA_NESTED FALSE)
cinch_add_library_target(ristra ristra IS_RISTRA_NESTED)
set_target_properties(ristra PROPERTIES LINKER_LANGUAGE CXX)

#------------------------------------------------------------------------------#
# configure .cmake file (exported to other projects)
#------------------------------------------------------------------------------#
set(CONF_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include")
set(CONF_LIB_DIRS "${CMAKE_INSTALL_PREFIX}/lib")
set(CONF_LIB_NAME "${CONF_LIB_DIRS}/libristra${CMAKE_SHARED_LIBRARY_SUFFIX}")
message(STATUS "CMAKE_SHARED_LIBRARY_SUFFIX = " ${CMAKE_SHARED_LIBRARY_SUFFIX})

configure_file(${PROJECT_SOURCE_DIR}/ristraConfig.cmake.in
  "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/ristraConfig.cmake" @ONLY)

install(FILES "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/ristraConfig.cmake"
  DESTINATION share/cmake)

#------------------------------------------------------------------------------#
# Add distclean target
#------------------------------------------------------------------------------#

add_custom_target(distclean rm -rf ${CMAKE_BINARY_DIR}/*)

#include(${CINCH_SOURCE_DIR}/cmake/ProjectLists.txt)

#------------------------------------------------------------------------------#
# Formatting options for emacs and vim.
# vim: set tabstop=4 shiftwidth=4 expandtab :
# sublime: none needed--NYUK NYUK NYUK!
#------------------------------------------------------------------------------#
